问题：

给定N中物品和一个背包。物品i的重量是Wi,其价值位Vi ，背包的容量为C。问应该如何选择装入背包的物品，
使得转入背包的物品的总价值为最大？？

a. 物品有n种，背包容量为C，分别用p[i]和w[i]存储第i种物品的价值和重量，用
x[i]标记第i种物品是否装入背包，用bestx[i]存储第i种物品的最优装载方案；
b. 用递归函数Backtrack (i,cp,cw)来实现回溯法搜索子集树（形式参数i表示递归深
度，n用来控制递归深度，形式参数cp和cw表示当前总价值和总重量，bestp表示当前
最优总价值）：
① 若i >n，则算法搜索到一个叶结点，判断当前总价值是否最优：
1> 若cp>bestp，更新当前最优总价值为当前总价值（即bestp=cp），更新
装载方案（即bestx[i]=x[i]( 1≤i≤n)）；
② 采用for循环对物品i装与不装两种情况进行讨论（0≤j≤1）：
1> x[i]=j；
2> 若总重量不大于背包容量（即cw+x[i]*w[i]<=c），则更新当前总价 br=""> 值和总重量
（即cw+=w[i]*x[i],cp+=p[i]*x[i]）, 对物品i+1调用递归函
数Backtrack(i+1,cp,cw) 继续进行装载；
3> 函数Backtrack(i+1,cp,cw)调用结束后则返回当前总价值和总重量
（即 cw-=w[i]*x[i],cp-=p[i]*x[i]）；
4> 当j>1时，for循环结束；
③ 当i=1时，若已测试完所有装载方案，外层调用就全部结束；
c. 主函数调用一次backtrack(1,0,0)即可完成整个回溯搜索过程，最终得到的bestp和bestx[i]
即为所求最大总价值和最优装载方案。 